<?php

/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create custom fields.
 * - Create custom instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 */
function fc_banner_slider_install() {

  // drupal_set_message('call fc_banner_slider_install function.');

  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();
  
  // We define the node type as an associative array.
  $fc_banner_slider = array(
    'type' => 'fc_banner_slider',
    'name' => $t('Banner Slider'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('Scroll here and there.'),
    'title_label' => $t('Title'),
	  'custom' => TRUE,
	  'locked' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($fc_banner_slider);

  //We add a body field and set the body label immediately.
  node_add_body_field($content_type, $t('Description'));

  // Save the content type
  node_type_save($content_type);

  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'fc_banner_slider');

  //As an alternative for node_add_body_field($type, $label = 'Body')
  //the 'label'-key can be used to set the body label on the field instance
  //$body_instance['label'] = $t('Example Description');

  // Add our fc_banner_slider_node_list view mode to the body instance display by
  // instructing the body to display as a summary
  /*
  $body_instance['display']['fc_banner_slider_node_list'] = array(
    'label' => 'hidden',
    'type' => 'text_summary_or_trimmed',
  );
  */

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_fc_banner_slider_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_fc_banner_slider_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $fc_banner_slider['type'];
    field_create_instance($instance);
  }
  
}



/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 */
function fc_banner_slider_uninstall() {

  // drupal_set_message('call fc_banner_slider_uninstall function.');

  // Gather all the fc_banner_slider content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'fc_banner_slider'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_fc_banner_slider_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the fc_banner_slider
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'fc_banner_slider');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('fc_banner_slider');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

}



function fc_banner_slider_enable() {

  // drupal_set_message('call fc_banner_slider_enable function.');

  // There is currently no way to manually flush an image style which causes
  // problems when installing a new module that implements
  // hook_image_styles_alter(). If the new module modifies an image style that
  // modification will not be applied to any images that have already been
  // generated unless the styles are flushed. This is one way around that.
  $styles = image_styles();
  foreach ($styles as $style) {
    image_style_flush($style);
  }

}



function fc_banner_slider_disable() {

  $styles = image_styles();
  foreach ($styles as $style) {
    image_style_flush($style);
  }

}



/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * fc_banner_slider_install() and fc_banner_slider_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 */
function _fc_banner_slider_installed_fields() {
  $t = get_t();
  return array(
    'fc_banner_slider_picture' => array(
      'field_name' => 'fc_banner_slider_picture',
      'type'       => 'image',
      'cardinality' => 1,
    ),
    'fc_banner_slider_linkpath' => array(
      'field_name' => 'fc_banner_slider_linkpath',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 255,
      ),
    ),
    'fc_banner_slider_showorder' => array(
      'field_name' => 'fc_banner_slider_showorder',
      'cardinality' => 1,
      'type'        => 'number_integer',
      'settings'    => array(
        'max_length' => 5,
      ),
    ),
  );
}



/**
 * Returns a structured array defining the instances for this content type.
 *
 * This is factored into this function so it can be used in both
 * fc_banner_slider_install() and fc_banner_slider_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 */
function _fc_banner_slider_installed_instances() {
  $t = get_t();
  return array(
    'fc_banner_slider_picture' => array(
      'field_name'  => 'fc_banner_slider_picture',
      'label'       => $t('Upload a picture'),
      'required'    => TRUE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
    ),
    'fc_banner_slider_linkpath' => array(
      'field_name' => 'fc_banner_slider_linkpath',
      'label'       => $t('Link path'),
      'required'    => TRUE,
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'fc_banner_slider_showorder' => array(
      'field_name' => 'fc_banner_slider_showorder',
      'label'       => $t('Show order'),
      'required'    => TRUE,
      'default_value' => array(array('value' => 5)),
      'widget'      => array(
        'type'    => 'number',
      ),
    ),
  );
}



/**
 * Implements hook_schema().
 */
function fc_banner_slider_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['fc_banner_slider_category'] = array(
    'description' => '',
    'fields' => array(
      'category_id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'category_name' => array(
        'description' => 'A description of the item',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'image_style_name' => array(
        'description' => 'A description of the item',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('category_id'),
  );

  $schema['fc_banner_slider_nodecategory'] = array(
    'description' => '',
    'fields' => array(
      'nodecategory_id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // Additional properties are just things that are common to all
      // entities and don't require field storage.
      'category_id' => array(
        'description' => 'A description of the item',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'A description of the item',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'A description of the item',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nodecategory_id'),
  );

  return $schema;
}

