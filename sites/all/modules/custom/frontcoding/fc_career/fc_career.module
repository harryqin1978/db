<?php 


/**
* Implementation of hook_permission()
*/
function fc_career_permission() {
  return array(
    'fc career admin location' => array(
      'title' => t('Administer Career Location'),
    ),
    'fc career admin department' => array(
      'title' => t('Administer Career Department'),
    ),
    'fc career admin career' => array(
      'title' => t('Administer Career '),
    ),
    'fc career apply department' => array(
    	'title' => t('Administer Career Apply'),
    ),
  );
}


/**
 * Implements hook_image_default_styles().
 */
function fc_career_image_default_styles() {
  $styles = array();
  $styles['fc_career_thumbnail'] = array(
    'effects' => array(
      array(
        // @todo We want to not upscale if the user uploads a smaller image, but
        //   image_scale_and_crop doesn't support that option. Try to get
        //   http://drupal.org/node/872206 into core, or solve it in contrib.
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 100, 'height' => 100, 'upscale' => TRUE),
        'weight' => 0,
      ),
    )
  );
  $styles['fc_career_mini'] = array(
    'effects' => array(
      array(
        // @todo We want to not upscale if the user uploads a smaller image, but
        //   image_scale_and_crop doesn't support that option. Try to get
        //   http://drupal.org/node/872206 into core, or solve it in contrib.
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 50, 'height' => 50, 'upscale' => TRUE),
        'weight' => 0,
      ),
    )
  );
  $styles['fc_career_large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 640, 'height' => 480, 'upscale' => FALSE),
        'weight' => 0,
      ),
    )
  );
  return $styles;
}


function fc_career_menu() {

  $items['admin/config/webmaster/fc_career'] = array(
    'title' => 'Career Management',
    'description' => 'Career content management.',
    'page callback' => 'fc_career_admin',
    'access arguments' => array('fc career admin career'),
    'file' => 'fc_career.admin.inc',
  );
  $items['admin/config/webmaster/fc_career/career_list'] = array(
    'title' => 'Career List',
    'access arguments' => array('fc career admin career'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'fc_career.admin.inc',
  );
  $items['admin/config/webmaster/fc_career/fc_career_location'] = array(
    'title' => 'Career Location Management',
    'description' => 'Career Location management.',
    'page callback' => 'fc_career_location_admin',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('fc career admin location'),
  	'weight' => -9,
    'file' => 'fc_career.admin.inc',
  );
  $items['admin/config/webmaster/fc_career/fc_career_department'] = array(
    'title' => 'Career Department Management',
    'description' => 'Career Department management.',
    'page callback' => 'fc_career_department_admin',
    'type' => MENU_LOCAL_TASK,
		'weight' => -8,
    'access arguments' => array('fc career admin department'),
    'file' => 'fc_career.admin.inc',
  );
  $items['admin/config/webmaster/fc_career/fc_career_apply'] = array(
    'title' => 'Career Apply Management',
    'description' => 'Career Apply Management.',
    'page callback' => 'fc_career_apply_admin',
    'type' => MENU_LOCAL_TASK,
		'weight' => -7,
    'access arguments' => array('fc career apply department'),
    'file' => 'fc_career.admin.inc',
  );
  
  $items['career-apply'] = array(
  'title' => 'Career Apply',
  'description' => 'Apply a career',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('career_apply'),
  'access arguments' =>  array('access content'),
  );
  
  $items['career-list'] = array(
    'page callback' => 'fc_career_career_list',
    'access arguments' => array('access content'),
    'title' => 'Career - All careers',
  );  
  return $items;
  
}




/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function fc_career_theme() {
  return array(

    'fc_career_itemlist' => array(
      'variables' => array(
        'items' => array(),
      ),
      'template' => 'fc_career_itemlist',
    ),

  );
}

function fc_career_career_list(){

  global $language;
	$session_filter = isset($_SESSION['_fc_career_list_filter']) ? $_SESSION['_fc_career_list_filter'] : array();
	

  $query = db_select('node', 'n');
  $query->join('field_data_fc_career_showorder', 'so', 'n.nid=so.entity_id AND n.vid=so.revision_id');
  $query->condition('n.status', 1, '=')
    ->condition('n.language', array(LANGUAGE_NONE, $language->language), 'IN')
    ->condition('n.type', 'fc_career', '=')
    ->condition('so.entity_type', 'node', '=')
    ->condition('so.bundle', 'fc_career', '=')
    ->orderBy('so.fc_career_showorder_value', 'ASC');

  // print_r($session_filter);
    
	if (isset($session_filter['dnid']) && $session_filter['dnid'] != "[any]" && isset($session_filter['lnid']) && $session_filter['lnid'] == "[any]") {
	
    if (is_numeric($session_filter['dnid'])) {
    	$query->join('fc_career_department_group', 'cg', 'cg.cnid=n.nid');
      $query->condition('cg.dnid', (int) $session_filter['dnid'], '=');      

    }
  }elseif (isset($session_filter['lnid']) && $session_filter['lnid'] != "[any]" && isset($session_filter['dnid']) && $session_filter['dnid'] == "[any]"){
 
  	if (is_numeric($session_filter['lnid'])) {
    	$query->join('fc_career_department_group', 'cg', 'cg.cnid=n.nid');
    	$query->join('fc_career_location_group', 'lg', 'lg.dnid=cg.dnid');
    	$query->condition('lg.lnid', (int) $session_filter['lnid'], '=');   
    	
  	}
  }elseif(isset($session_filter['lnid']) && isset($session_filter['dnid']) && $session_filter['lnid'] != "[any]" && $session_filter['dnid'] != "[any]"){
  	
  		
  			//echo $session_filter['dnid'];
  		if ($_SESSION['_fc_career_list_filter_last']['dnid'] != $session_filter['dnid']){
  		
  		$query->join('fc_career_department_group', 'cg', 'cg.cnid=n.nid');
			$query->join('fc_career_location_group','lg','lg.dnid=cg.dnid');
    	$query->condition('lg.lnid',(int) $session_filter['lnid'],'=');  	
  		$query->condition('cg.dnid',(int) $_SESSION['_fc_career_list_filter_last']['dnid'],'=');
  		$_SESSION['_fc_career_list_filter_last']['dnid'] = $session_filter['dnid'];
  		
  		}else {
  			
  		$query->join('fc_career_department_group', 'cg', 'cg.cnid=n.nid');
			$query->join('fc_career_location_group','lg','lg.dnid=cg.dnid');
    	$query->condition('lg.lnid',(int) $session_filter['lnid'],'=');  	
  		$query->condition('cg.dnid',(int) $session_filter['dnid'],'=');
  		$_SESSION['_fc_career_list_filter_last']['dnid'] = $session_filter['dnid'];  		
  		}
  		
  }
  $query->fields('n', array('nid', 'title'));
  user_build_filter_query($query);      
  $result = $query->execute();
  
  $items = array();
	
	
	$items = array();
	$form_filter = drupal_get_form('_fc_career_list_filter');
  $items['filter'] = array(
    '#markup' => render($form_filter),
  );
	foreach ($result as $item){
		//print_r($item);
		$items['title'][] = l(t("".$item->title.""), "node/".$item->nid."", array('attributes' => array('class' => 'career-title-link')));
	}
	
	
	

  return theme(
    'fc_career_itemlist', array(
      'items' => $items,
    )
  );
}


/*Career filter*/


	function _fc_career_list_filter($form, &$form_state) {

  $session = isset($_SESSION['_fc_career_list_filter']) ? $_SESSION['_fc_career_list_filter'] : array();

	drupal_add_js('jQuery(document).ready(function(){jQuery("#edit-lnid").change(function(){
		
		jQuery("#-fc-career-list-filter").submit();

	}); 
	});', 'inline');
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only items where'),
    '#theme' => 'exposed_filters__node',
    '#attributes' => array('class' => array('container-inline')),
  );

  
  //location filter
  
  $query = db_select('node', 'n');
  $query->condition('n.status', 1, '=')
      ->condition('n.type', 'fc_career_location', '=')
      ->fields('n', array('nid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed'));

  $result = $query->execute();

  $options = array('[any]'=>t('---All Location---'));
  
  foreach ($result as $row) {
    $options[$row->nid] = $row->title;
  }
  
  $form['filters']['lnid'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#options' => $options,
    '#default_value' => isset($session['lnid']) ? $session['lnid'] : '',
    '#required' => FALSE,
    '#title_display' => 'invisible',
  	'#attributes'=>array('onchange' => "$('#-fc-career-list-filter').click()"),
  );
  
  
		//department filter 
	if(isset($session['lnid']) && $session['lnid'] == "[any]"){ 
		
    $query = db_select('node', 'n');
    $query->condition('n.status', 1, '=')
      ->condition('n.type', 'fc_career_department', '=')
      ->fields('n', array('nid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed'));
	}else {
		
    $query = db_select('node', 'n');
    
    $query->join('fc_career_location_group','lg','lg.dnid=n.nid');
    if (isset($session['lnid'])){
    $query->condition('lg.lnid',(int) $session['lnid'],'=');
    }
    $query->condition('n.status', 1, '=')
      ->condition('n.type', 'fc_career_department', '=')
      ->fields('n', array('nid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed'));	
		
	}
  $result = $query->execute();

  $options = array('[any]'=>t('---All Department---'));
  
  foreach ($result as $row) {
    $options[$row->nid] = $row->title;
  }
  
  $form['filters']['dnid'] = array(
    '#type' => 'select',
    '#title' => t('Department'),
    '#options' => $options,
    '#default_value' => isset($session['dnid']) ? $session['dnid'] : '',
    '#required' => FALSE,
    '#title_display' => 'invisible',
  );
  
  $form['filters']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;

}	
	function _fc_career_list_filter_submit($form, &$form_state) {
	//echo $form_state['values']['dnid'];exit();
  $_SESSION['_fc_career_list_filter']['lnid'] = $form_state['values']['lnid'];
  $_SESSION['_fc_career_list_filter']['dnid'] = $form_state['values']['dnid'];
 // echo $_SESSION['_fc_career_list_filter']['dnid'];exit();
  
}	



/**
 * Implements hook_form_alter().
 */
function fc_career_form_alter(&$form, $form_state, $form_id){
	
	if ($form_id == "fc_career_node_form"){

    $query = db_select('node', 'n');
    $query->join('fc_career_location_group', 'lg', 'lg.dnid=n.nid');
    $query->join('node', 'n_location', 'n_location.nid=lg.lnid');
    $query->condition('n.status', 1, '=')
      ->condition('n.type', 'fc_career_department', '=')
      ->orderBy('n.nid', 'ASC')
      ->fields('n', array('nid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed'))
      ->fields('lg', array('lnid'))
      ->addField('n_location','title','location_title');

    $result = $query->execute();
    if (!isset($form['#node']->dnid)) {
      $options = array('' => t('---Please select---'));
    }
    foreach ($result as $row) {
      $options[$row->nid] = check_plain($row->location_title).' -> '.check_plain($row->title);
    }
    $form['dnid'] = array(
      '#type' => 'select',
      '#title' => t('Department'),
      '#options' => $options,
      '#required' => TRUE,
      '#weight' => -1,
      '#default_value' => isset($form['#node']->dnid) ? $form['#node']->dnid : '',
    ); 
       
 
	}elseif ($form_id == "fc_career_department_node_form"){

		$query = db_select('node', 'n');
    $query->condition('n.status', 1, '=')
    
      ->condition('n.type', 'fc_career_location', '=')
      ->orderBy('n.nid', 'ASC')
      ->fields('n', array('nid', 'type', 'language', 'title', 'uid', 'status', 'created', 'changed'));

    $result = $query->execute();
    if (!isset($form['#node']->lnid)) {
      $options = array('' => t('---Please select---'));
    }
    foreach ($result as $row) {
      $options[$row->nid] = check_plain($row->title);
    }
    $form['dnid'] = array(
      '#type' => 'select',
      '#title' => t('Location'),
      '#options' => $options,
      '#required' => TRUE,
      '#weight' => -1,
      '#default_value' => isset($form['#node']->lnid) ? $form['#node']->lnid : '',
    );	
		
	}
}


//career apply 

function career_apply($form, &$form_state){
		
		if (isset($_GET['destination']) && $_GET['destination'] != null ){
			$career_id =  substr($_GET['destination'], 5);
			
		}
	  $options = array('[any]'=>t('---All Department---'));
		$result = db_query("SELECT nid, title FROM {node} as n where n.type = 'fc_career'");
		foreach ($result as $record) {
  		// Do something with each $record
  		$node = node_load($record->nid);
  		$options[$node->nid] = $node->title;
		}

	
	$form['career_titile'] = array(
		'#type' => 'select',
		'#title' => t('Career'),
		'#options' => $options,
		'#default_value' => isset($career_id)?$career_id:"",
		'#required' => TRUE,
	);
	$form['phone'] = array(
  '#type' => 'textfield',
  '#title' => t('Phone number'),
  '#default_value' => variable_get('contact_us_information_phone', ''),
	'#required' => true,
  );
  
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => variable_get('contact_us_information_email', ''),
  	'#required' => true,
  );
  $form['content'] = array(
  '#type' => 'textarea',
  '#title' => t('Content'),
  '#default_value' => variable_get('contact_us_information_email', ''),
  '#required' => true,
  );
 
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}



function career_apply_validate($form, &$form_state) {

  if ( $form_state['values']['phone'] && !preg_match('/^[0-9|-]{6,20}$/',$form_state['values']['phone']) ) {
    form_set_error('phone', t('Phone number format is not correct.'));
  }
  if ( $form_state['values']['email'] && !valid_email_address($form_state['values']['email']) ) {
    form_set_error('email', t('Email format is not correct.'));
  }

}

function career_apply_submit($form, $form_state){
	//echo 11;exit();
	$career_id = $form_state['values']['career_titile'];
	$phone = $form_state['values']['phone'];
	$email = $form_state['values']['email'];
	$content = $form_state['values']['content'];
	
	  db_insert('fc_career_apply')
    ->fields(array(
        'cid' => $career_id,
        'phone_number' => $phone,
    		'email' => $email,
    		'content' => $content,
    ))
    ->execute();
	drupal_set_message("Your Submit Has Be Done!We Will Connect You Soon!");
	
}

/**
 * Implements hook_node_insert().
 */
function fc_career_node_insert($node) {
  
  if ($node->type == 'fc_career') {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('fc_career_department_group')
    ->fields(array(
        'dnid' => $node->dnid,
        'cnid' => $node->nid,
    ))
    ->execute();
  }
  if ($node->type == 'fc_career_department') {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('fc_career_location_group')
    ->fields(array(
        'lnid' => $node->dnid,
        'dnid' => $node->nid,
    ))
    ->execute();
  }

}

/**
 * Implements hook_node_load().
 */
function fc_career_node_load($nodes, $types) {

  foreach ($nodes as $node) {

    if ($node->type == 'fc_career') {
      $dnid = db_select('fc_career_department_group', 'cg')
      ->fields('cg', array('dnid'))
      ->where('cg.cnid = :cnid', array(':cnid' => $node->nid))
      ->execute()->fetchField();
      $node->dnid = $dnid;
    }
    if ($node->type == 'fc_career_department') {
      $lnid = db_select('fc_career_location_group', 'lg')
      ->fields('lg', array('lnid'))
      ->where('lg.dnid = :dnid', array(':dnid' => $node->nid))
      ->execute()->fetchField();
      $node->lnid = $lnid;
    }


  }

}

/**
 * Implements hook_node_update().
 */
function fc_career_node_update($node) {
  
  if ($node->type == 'fc_career') {
    $found = db_select('fc_career_department_group', 'cg')
      ->fields('cg', array(
        'dnid',
      ))
      ->where('cg.cnid = (:cnid)', array(':cnid' => $node->nid))
      ->execute()->fetchField();

    if ($found) {
      db_update('fc_career_department_group')
        ->fields(array('dnid' => $node->dnid))
        ->condition('cnid', $node->nid)
        ->execute();
    }
    else {
      fc_career_node_insert($node);
    }
  }
  
  if ($node->type == 'fc_career_department') {
    $found = db_select('fc_career_location_group', 'lg')
      ->fields('lg', array(
        'lnid',
      ))
      ->where('lg.dnid = (:dnid)', array(':dnid' => $node->nid))
      ->execute()->fetchField();

    if ($found) {
      db_update('fc_career_location_group')
        ->fields(array('lnid' => $node->lnid))
        ->condition('dnid', $node->nid)
        ->execute();
    }
    else {
      fc_career_node_insert($node);
    }
  } 
  
}


/**
 * Implements hook_node_delete().
 */
function fc_career_node_delete($node) {

	if ($node->type == 'fc_career') {
  db_delete('fc_career_department_group')
    ->condition('cnid', $node->nid)
    ->execute();
	}
	if ($node->type == 'fc_career_department') {
  db_delete('fc_career_location_group')
    ->condition('dnid', $node->nid)
    ->execute();
	}	
	
}

//function hook_node_view($node, $view_mode, $langcode) 
//http://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_view/7
function fc_career_node_view($node, $view_mode){
	
	if ($node->type == "fc_career"){
		$destination = drupal_get_destination();
		$node->content['links']['fb'] = array(
      '#links' => array(
        array(
          'title' => 'Apply this Career',
          'html' => TRUE, 
          'href' => "career-apply",
        	'query' => $destination,
        ),
      ),
    );
		
	}
	
}



